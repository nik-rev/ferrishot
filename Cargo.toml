[package]
name = "ferrishot"
version = "0.2.0"
license = "MIT OR Apache-2.0"
edition = "2024"
description = "A powerful screenshot app"
repository = "https://github.com/nik-rev/ferrishot"
homepage = "https://github.com/nik-rev/ferrishot"
keywords = ["screenshot", "screen-capture", "capture", "flameshot"]
categories = ["visualization", "multimedia"]
authors = ["Nik Revenco"]

[features]
debug = []

[workspace]
members = [".", "docgen"]

[package.metadata.wix]
upgrade-guid = "338F87CB-7559-4755-9DC7-889308AFCC72"
path-guid = "B2F84121-9832-457D-AD64-A5598BCD4AA7"
license = false
eula = false

[build-dependencies]
# to generate the RGBA bytes for logo of ferrishot
image = "0.25.6"

[dependencies]

# --- core crates ---
# obtain position of the mouse
mouse_position = "0.1.4"

# cross-platform "take a screenshot of the monitor" UI.
#
# FORK: screenshot on wayland using libwayshot is very fast,
# so it comes before x11 and freedesktop. The reason is that
# freedesktop can block for like 1.5s before giving up. x11 can block for about 30ms
# libwayshot blocks for about 500ns. by "block" I mean how long it takes
#
# on the original xcap, they try libwayshot AFTER trying freedesktop
# which leads to VERY bad performance on wayland (about 1.5 seconds delay for nothing)
xcap = { package = "ferrishot_xcap", version = "0.4.1", features = [
  "image",
  "vendored",
] }

# Iced is the native UI framework that ferrishot uses
# 
# We need iced 0.14 (currently just `master`) for the app to function properly. This is because
# prior to iced 0.14, there is no way to create a full-screen window. That means we'd have to
# - create the window
# - THEN make it full screen
#
# This makes a "flash" for a split second which is very noticable and makes the experience worse
# And we need this iced 0.14 available on crates.io because I'd like to publish ferrishot to crates.io
iced = { package = "ferrishot_iced", version = "0.14.1", features = [
  "canvas",
  "image",
  "web-colors",
  "advanced",
  "svg",
  "wgpu",
  "tokio",
  "qr_code",
] }
# provider a cross-platform clipboard API
arboard = { version = "3.5", features = ["wayland-data-control"] }
# image encoding, transformations and decoding
image = "0.25.6"
# command line argument parser
clap = { version = "4.5.35", features = [
  "derive",
  "wrap_help",
  "unstable-markdown",
] }
# file dialog
rfd = "0.15.3"
# cross-platform API to get locations like config directory, cache directory...
etcetera = "0.10.0"
# tempfile for data transmission of the image bytes
tempfile = "3.19.1"
# async runtime
tokio = { version = "1.44.2", features = ["full"] }
# knus is the serde-like derive macro to parse KDL into Rust structs
# 
# This is a fork simply so we can publish the branch https://github.com/nik-rev/knus/tree/kdl-v2
# to crates.io, required to be able to use kdl-v2
#
# I'd like to just use kdl-v2 to avoid breaking users' configs in the future when we'll
# migrate from kdl v1 -> kdl v2 anyways
ferrishot_knus = "3.3"
# pretty error messages for KDL derive
miette = { version = "7.5.0", features = ["fancy"] }

# --- logging ---
env_logger = "0.11.8"
log = "0.4.27"
chrono = "0.4.40"     # used only for time stamp 

# --- send web requsts --- 
reqwest = { version = "0.12.15", default-features = false, features = [
  # this + `default-features = false` removes dependency on OpenSSL
  "rustls-tls",
  "json",
  "multipart",
  "stream",
] }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"

pretty_assertions = "1.4.1"

# --- helper crates ---

# typed error enum generation
thiserror = "2.0.12"
# avoid boilerplate when writing methods that just call methods on fields in the same struct
delegate = "0.13"
# Allows implementing methods for external types via extension traits
# this crate allows skipping the definition of the extension trait which means we
# don't have to write signatures of the functions twice which is awesome
easy-ext = "1.0.2"
derive_more = { version = "2.0.1", features = ["is_variant"] }
strum = { version = "0.27.1", features = ["derive"] }
human_bytes = "0.4.3"
# generate builder methods
bon = "3.6.3"
# allows 
tap = "1.0.1"
# dedents string literals
indoc = "2.0.6"

anstyle = "1.0.10"
paste = "1.0.15"

[lints.rust]
missing_docs = "warn"
unused_qualifications = "warn"

[lints.clippy]
pedantic = { priority = -1, level = "warn" }
nursery = { priority = -1, level = "warn" }

# $a * $b + $c is slower and less precise than $a.mul_add($b, $c) but it is more readable
# the gain in speed / precision will be negligible in most situations
suboptimal_flops = "allow"
# arbitrary limit imposes unnecessary restriction and can make code harder to follow
too_many_lines = "allow"
# if we need it const, make it const. no need to make everything that can be const, const
missing_const_for_fn = "allow"

if_then_some_else_none = "warn"

# --- casts
# 
# casts from floats -> int are common in the code, and in
# most cases we don't care about precision as we are
# dealing with pixels which cannot be float.
cast_sign_loss = "allow"
cast_possible_truncation = "allow"
cast_precision_loss = "allow"
# ---

missing_errors_doc = "allow"

# use Trait; => use Trait as _;
unused_trait_names = "warn"

# #[allow] => #[allow, reason = "why"]
allow_attributes_without_reason = "warn"
# .unwrap() => .expect("why")
unwrap_used = "warn"
# assert!(...) => assert!(..., "why")
missing_assert_message = "warn"

missing_docs_in_private_items = "warn"

# --- catch debug remnants
print_stderr = "warn"
print_stdout = "warn"
dbg_macro = "warn"
todo = "warn"
# ---

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"
codegen-units = 1
lto = true
